/// <reference types="node" />
import { EventEmitter } from 'events';
import { NodeOption, Shoukaku } from '../Shoukaku';
import { Player } from '../guild/Player';
import { State } from '../Constants';
import { Queue } from './Queue';
import { Rest } from './Rest';
import Websocket from 'ws';
export interface VoiceChannelOptions {
    guildId: string;
    shardId: number;
    channelId: string;
    deaf?: boolean;
    mute?: boolean;
}
export interface NodeStats {
    players: number;
    playingPlayers: number;
    memory: {
        reservable: number;
        used: number;
        free: number;
        allocated: number;
    };
    frameStats: {
        sent: number;
        deficit: number;
        nulled: number;
    };
    cpu: {
        cores: number;
        systemLoad: number;
        lavalinkLoad: number;
    };
    uptime: number;
}
export interface ResumableHeaders {
    [key: string]: string;
    'Client-Name': string;
    'User-Agent': string;
    'Authorization': string;
    'User-Id': string;
    'Resume-Key': string;
}
export interface NonResumableHeaders {
    [key: string]: string;
    'Client-Name': string;
    'User-Agent': string;
    'Authorization': string;
    'User-Id': string;
}
/**
 * Represents a Lavalink node
 */
export declare class Node extends EventEmitter {
    /**
     * Shoukaku class
     */
    readonly manager: Shoukaku;
    /**
     * A map of guild ID to players
     */
    readonly players: Map<string, Player>;
    /**
     * Lavalink rest API
     */
    readonly rest: Rest;
    /**
     * Lavalink API message queue
     */
    readonly queue: Queue;
    /**
     * Name of this node
     */
    readonly name: string;
    /**
     * Group in which this node is contained
     */
    readonly group?: string;
    /**
     * URL of Lavalink
     */
    private readonly url;
    /**
     * Credentials to access Lavalink
     */
    private readonly auth;
    /**
     * The number of reconnects to Lavalink
     */
    reconnects: number;
    /**
     * The state of this connection
     */
    state: State;
    /**
     * Statistics from Lavalink
     */
    stats: NodeStats | null;
    /**
     * Websocket instance
     */
    ws: Websocket | null;
    /**
     * Boolean that represents if the node has initialized once (will always be true when alwaysSendResumeKey is true)
     */
    protected initialized: boolean;
    /**
     * Boolean that represents if this connection is destroyed
     */
    protected destroyed: boolean;
    /**
     * @param manager Shoukaku instance
     * @param options.name Name of this node
     * @param options.url URL of Lavalink
     * @param options.auth Credentials to access Lavalnk
     * @param options.secure Whether to use secure protocols or not
     * @param options.group Group of this node
     */
    constructor(manager: Shoukaku, options: NodeOption);
    /**
     * Penalties for load balancing
     * @returns Penalty score
     * @internal @readonly
     */
    get penalties(): number;
    /**
     * Connect to Lavalink
     */
    connect(): void;
    /**
     * Disconnect from lavalink
     * @param code Status code
     * @param reason Reason for disconnect
     */
    disconnect(code: number, reason?: string): void;
    /**
     * Join a voice channel in a guild
     * @param options.guildId Guild ID in which voice channel to connect to is located
     * @param options.shardId Shard ID in which the guild exists
     * @param options.channelId Channel ID of voice channel to connect to
     * @param options.deaf Optional boolean value to specify whether to deafen the current bot user
     * @param options.mute Optional boolean value to specify whether to mute the current bot user
     * @returns A promise that resolves to a player class
     */
    joinChannel(options: VoiceChannelOptions): Promise<Player>;
    /**
     * Disconnect from connected voice channel
     * @param guildId ID of guild that contains voice channel
     */
    leaveChannel(guildId: string): void;
    /**
     * Handle connection open event from Lavalink
     * @param response Response from Lavalink
     * @param reconnect Whether to reconnect on failure
     * @internal
     */
    private open;
    /**
     * Handle message from Lavalink
     * @param message JSON message
     * @internal
     */
    private message;
    /**
     * Handle closed event from lavalink
     * @param code Status close
     * @param reason Reason for connection close
     */
    private close;
    /**
     * Destroys the websocket connection
     * @internal
     */
    private destroy;
    /**
     * Clear message queue and move players to other nodes if possible
     * @internal
     */
    private clean;
    /**
     * Reconnect to Lavalink
     * @internal
     */
    private reconnect;
    /**
     * Handle raw message from Discord
     * @param packet Packet data
     * @internal
     */
    discordRaw(packet: any): void;
}
//# sourceMappingURL=Node.d.ts.map