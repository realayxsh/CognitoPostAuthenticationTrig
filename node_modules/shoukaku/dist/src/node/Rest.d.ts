import { Node } from './Node';
import { NodeOption } from '../Shoukaku';
export type LoadType = 'TRACK_LOADED' | 'PLAYLIST_LOADED' | 'SEARCH_RESULT' | 'NO_MATCHES' | 'LOAD_FAILED';
export interface Track {
    track: string;
    info: {
        identifier: string;
        isSeekable: boolean;
        author: string;
        length: number;
        isStream: boolean;
        position: number;
        title: string;
        uri: string;
        sourceName: string;
    };
}
export interface LavalinkResponse {
    loadType: LoadType;
    playlistInfo: {
        name?: string;
        selectedTrack?: number;
    };
    tracks: Track[];
}
export interface Address {
    address: string;
    failingTimestamp: number;
    failingTime: string;
}
export interface RoutePlanner {
    class?: string;
    details?: {
        ipBlock: {
            type: string;
            size: string;
        };
        failingAddresses: Address[];
    };
    rotateIndex?: string;
    ipIndex?: string;
    currentAddress?: string;
    blockIndex?: string;
    currentAddressIndex?: string;
}
/**
 * Wrapper around Lavalink REST API
 */
export declare class Rest {
    /**
     * Node that initialized this instance
     */
    protected readonly node: Node;
    /**
     * URL of Lavalink
     */
    protected readonly url: string;
    /**
     * Credentials to access Lavalink
     */
    protected readonly auth: string;
    /**
     * @param node An instance of Node
     * @param options.name Name of this node
     * @param options.url URL of Lavalink
     * @param options.auth Credentials to access Lavalnk
     * @param options.secure Weather to use secure protocols or not
     * @param options.group Group of this node
     */
    constructor(node: Node, options: NodeOption);
    /**
     * Resolve a track
     * @param identifier Track ID
     * @returns A promise that resolves to a Lavalink response or void
     */
    resolve(identifier: string): Promise<LavalinkResponse | null>;
    /**
     * Decode a track
     * @param track Encoded track
     * @returns Promise that resolves to a track or void
     */
    decode(track: string): Promise<Track | null>;
    /**
     * Get routplanner status from Lavalink
     * @returns Promise that resolves to a routeplanner response or void
     * @internal
     */
    getRoutePlannerStatus(): Promise<RoutePlanner | null>;
    /**
     * Release blacklisted IP address into pool of IPs
     * @param address IP address
     * @internal
     */
    unmarkFailedAddress(address: string): Promise<void | null>;
    /**
     * Make a request to Lavalink
     * @param fetchOptions.endpoint Lavalink endpoint
     * @param fetchOptions.options Options passed to fetch
     * @internal
     */
    private fetch;
}
//# sourceMappingURL=Rest.d.ts.map