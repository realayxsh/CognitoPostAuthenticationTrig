/// <reference types="node" />
import { EventEmitter } from 'events';
import { State } from '../Constants';
import { VoiceChannelOptions } from '../node/Node';
import { Player } from './Player';
/**
 * Represents the partial payload from a stateUpdate event
 */
export interface StateUpdatePartial {
    channel_id?: string;
    session_id?: string;
    self_deaf: boolean;
    self_mute: boolean;
}
/**
 * Represents the payload from a serverUpdate event
 */
export interface ServerUpdate {
    token: string;
    guild_id: string;
    endpoint: string;
}
/**
 * Represents a connection to a Discord voice channel
 */
export declare class Connection extends EventEmitter {
    /**
     * An instance of the Player class
     */
    readonly player: Player;
    /**
     * ID of Guild that contains the connected voice channel
     */
    guildId: string;
    /**
     * ID of the connected voice channel
     */
    channelId: string | null;
    /**
     * ID of the Shard that contains the guild that contains the connected voice channel
     */
    shardId: number;
    /**
     * ID of current session
     */
    sessionId: string | null;
    /**
     * Region of connected voice channel
     */
    region: string | null;
    /**
     * Mute status in connected voice channel
     */
    muted: boolean;
    /**
     * Deafen status in connected voice channel
     */
    deafened: boolean;
    /**
     * Connection state
     */
    state: State;
    /**
     * Boolean that indicates if voice channel changed since initial connection
     */
    moved: boolean;
    /**
     * Boolean that indicates if this instance is reconnecting
     */
    reconnecting: boolean;
    /**
     * Cached serverUpdate event from Lavalink
     */
    private serverUpdate;
    /**
     * @param player Shoukaku Player class
     * @param options.guildId Guild ID in which voice channel to connect to is located
     * @param options.shardId Shard ID in which the guild exists
     * @param options.channelId Channel ID of voice channel to connect to
     * @param options.deaf Optional boolean value to specify whether to deafen the current bot user
     * @param options.mute Optional boolean value to specify whether to mute the current bot user
     */
    constructor(player: Player, options: VoiceChannelOptions);
    /**
     * Set the deafen status for the current bot user
     * @param deaf Boolean value to indicate whether to deafen or undeafen
     * @defaultValue false
     */
    setDeaf(deaf?: boolean): void;
    /**
     * Set the mute status for the current bot user
     * @param mute Boolean value to indicate whether to mute or unmute
     * @defaultValue false
     */
    setMute(mute?: boolean): void;
    /**
     * Disconnect the current bot user from the connected voice channel
     */
    disconnect(): void;
    /**
     * Connect the current bot user to a voice channel
     *
     * @param options.guildId Guild ID in which voice channel to connect to is located
     * @param options.shardId Unused parameter
     * @param options.channelId Channel ID of voice channel to connect to
     * @param options.deaf Optional boolean value to specify whether to deafen or undeafen the current bot user
     * @param options.mute Optional boolean value to specify whether to mute or unmute the current bot user
     */
    connect(options: VoiceChannelOptions): Promise<void>;
    /**
     * Update Session ID, Channel ID, Deafen status and Mute status of this instance
     *
     * @param options.session_id ID of this session
     * @param options.channel_id ID of currently connected voice channel
     * @param options.self_deaf Boolean that indicates if the current bot user is deafened or not
     * @param options.self_mute Boolean that indicates if the current bot user is muted or not
     * @internal
     */
    setStateUpdate(options: StateUpdatePartial): void;
    /**
     * Send voiceUpdate event to Lavalink and also cache the serverUpdate event from Discord
     * @internal
     */
    setServerUpdate(data: ServerUpdate): void;
    /**
     * Send voiceUpdate to Lavalink again
     * @internal
     */
    resendServerUpdate(): void;
    /**
     * Destroy the current Lavalink player
     */
    destroyLavalinkPlayer(): void;
    /**
     * Send data to Discord
     * @param data The data to send
     * @param important Whether to prioritize sending this packet in the queue
     * @internal
     */
    private send;
}
//# sourceMappingURL=Connection.d.ts.map