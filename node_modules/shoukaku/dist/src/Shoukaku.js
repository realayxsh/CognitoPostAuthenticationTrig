"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Shoukaku = void 0;
const events_1 = require("events");
const Constants_1 = require("./Constants");
const Node_1 = require("./node/Node");
const Utils_1 = require("./Utils");
/**
 * Main Shoukaku class
 */
class Shoukaku extends events_1.EventEmitter {
    /**
     * @param connector A Discord library connector
     * @param nodes An array that conforms to the NodeOption type that specifies nodes to connect to
     * @param options.resume Whether to resume a connection on disconnect to Lavalink (Server Side) (Note: DOES NOT RESUME WHEN THE LAVALINK SERVER DIES)
     * @param options.resumeKey Resume key for Lavalink
     * @param options.resumeTimeout Time to wait before lavalink starts to destroy the players of the disconnected client
     * @param options.resumeByLibrary Whether to resume the players by doing it in the library side (Client Side) (Note: TRIES TO RESUME REGARDLESS OF WHAT HAPPENED ON A LAVALINK SERVER)
     * @param options.alwaysSendResumeKey Disables the first time initialization tracking of nodes, and just sends the resume key always (Note: Useful for people who save their players to redis and wants to resume sessions even at first boot)
     * @param options.reconnectTries Number of times to try and reconnect to Lavalink before giving up
     * @param options.reconnectInterval Timeout before trying to reconnect
     * @param options.restTimeout Time to wait for a response from the Lavalink REST API before giving up
     * @param options.moveOnDisconnect Whether to move players to a different Lavalink node when a node disconnects
     * @param options.userAgent User Agent to use when making requests to Lavalink
     * @param options.structures Custom structures for shoukaku to use
     */
    constructor(connector, nodes, options = {}) {
        super();
        this.connector = connector.set(this);
        this.options = (0, Utils_1.mergeDefault)(Constants_1.ShoukakuDefaults, options);
        this.nodes = new Map();
        this.id = null;
        this.connector.listen(nodes);
    }
    /**
     * Get a list of players
     * @returns A map of guild IDs and players
     * @readonly
     */
    get players() {
        const players = new Map();
        for (const node of this.nodes.values()) {
            for (const [id, player] of node.players)
                players.set(id, player);
        }
        return players;
    }
    /**
     * Add a Lavalink node to the pool of available nodes
     * @param options.name Name of this node
     * @param options.url URL of Lavalink
     * @param options.auth Credentials to access Lavalnk
     * @param options.secure Whether to use secure protocols or not
     * @param options.group Group of this node
     */
    addNode(options) {
        const node = new Node_1.Node(this, options);
        node.on('debug', (...args) => this.emit('debug', ...args));
        node.on('reconnecting', (...args) => this.emit('reconnecting', ...args));
        node.on('error', (...args) => this.emit('error', ...args));
        node.on('close', (...args) => this.emit('close', ...args));
        node.on('ready', (...args) => this.emit('ready', ...args));
        node.on('disconnect', (...args) => this.emit('disconnect', ...args));
        node.connect();
        this.nodes.set(node.name, node);
    }
    /**
     * Remove a Lavalink node from the pool of available nodes
     * @param name Name of the node
     * @param reason Reason of removing the node
     */
    removeNode(name, reason = 'Remove node executed') {
        const node = this.nodes.get(name);
        if (!node)
            throw new Error('The node name you specified doesn\'t exist');
        node.disconnect(1000, reason);
        node.removeAllListeners();
    }
    /**
     * Select a Lavalink node from the pool of nodes
     * @param name A specific node, an array of nodes, or the string `auto`
     * @returns A Lavalink node or undefined
     */
    getNode(name = 'auto') {
        if (!this.nodes.size)
            throw new Error('No nodes available, please add a node first');
        if (Array.isArray(name) || name === 'auto')
            return this.getIdeal(name);
        const node = this.nodes.get(name);
        if (!node)
            throw new Error('The node name you specified is not one of my nodes');
        if (node.state !== Constants_1.State.CONNECTED)
            throw new Error('This node is not yet ready');
        return node;
    }
    /**
     * Get the Lavalink node the least penalty score
     * @param group A group, an array of groups, or the string `auto`
     * @returns A Lavalink node or undefined
     * @internal
     */
    getIdeal(group) {
        const nodes = [...this.nodes.values()]
            .filter(node => node.state === Constants_1.State.CONNECTED);
        if (group === 'auto') {
            return nodes
                .sort((a, b) => a.penalties - b.penalties)
                .shift();
        }
        return nodes
            .filter(node => node.group && group.includes(node.group))
            .sort((a, b) => a.penalties - b.penalties)
            .shift();
    }
}
exports.Shoukaku = Shoukaku;
//# sourceMappingURL=Shoukaku.js.map